{"version":3,"sources":["../src/publish.ts"],"names":["publish","extensionId","target","asset","logger","GOOGLE_CLIENT_ID","clientId","GOOGLE_CLIENT_SECRET","clientSecret","GOOGLE_REFRESH_TOKEN","refreshToken","process","env","SemanticReleaseError","webStore","token","fetchToken","zipFile","uploadRes","uploadExisting","uploadState","errors","itemError","forEach","err","semanticError","error_detail","error_code","push","AggregateError","publishRes","status","includes","i","length","code","message","statusDetail","log","name","url"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;;;AAKA,MAAMA,OAAO,GAAG,OAAO;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,MAAf;AAAuBC,EAAAA;AAAvB,CAAP,EAAqD;AAAEC,EAAAA;AAAF,CAArD,KAA6E;AAC3F,QAAM;AACJC,IAAAA,gBAAgB,EAAEC,QADd;AAEJC,IAAAA,oBAAoB,EAAEC,YAFlB;AAGJC,IAAAA,oBAAoB,EAAEC;AAHlB,MAIFC,OAAO,CAACC,GAJZ;;AAMA,MAAI,CAACX,WAAL,EAAkB;AAChB,UAAM,IAAIY,cAAJ,CACJ,mGADI,EAEJ,gBAFI,CAAN;AAID;;AAED,MAAI,CAACV,KAAL,EAAY;AACV,UAAM,IAAIU,cAAJ,CACJ,6FADI,EAEJ,UAFI,CAAN;AAID;;AAED,QAAMC,QAAQ,GAAG,MAAM,mCAAI;AACzBR,IAAAA,QADyB;AAEzBE,IAAAA,YAFyB;AAGzBP,IAAAA,WAHyB;AAIzBS,IAAAA;AAJyB,GAAJ,CAAvB;AAOA,QAAMK,KAAK,GAAG,MAAMD,QAAQ,CAACE,UAAT,EAApB;AAEA,QAAMC,OAAO,GAAG,+BAAiBd,KAAjB,CAAhB;AACA,QAAMe,SAAS,GAAG,MAAMJ,QAAQ,CAACK,cAAT,CAAwBF,OAAxB,EAAiCF,KAAjC,CAAxB;;AAEA,MAAIG,SAAS,CAACE,WAAV,KAA0B,SAA9B,EAAyC;AACvC,UAAMC,MAA8B,GAAG,EAAvC;AACAH,IAAAA,SAAS,CAACI,SAAV,CAAoBC,OAApB,CAA6BC,GAAD,IAAc;AACxC,YAAMC,aAAa,GAAG,IAAIZ,cAAJ,CACpBW,GAAG,CAACE,YADgB,EAEpBF,GAAG,CAACG,UAFgB,CAAtB;AAIAN,MAAAA,MAAM,CAACO,IAAP,CAAYH,aAAZ;AACD,KAND;AAOA,UAAM,IAAII,uBAAJ,CAAmBR,MAAnB,CAAN;AACD;;AAED,QAAMS,UAAU,GAAG,MAAMhB,QAAQ,CAACd,OAAT,CAAiBE,MAAM,IAAI,SAA3B,EAAsCa,KAAtC,CAAzB;;AAEA,MAAI,CAACe,UAAU,CAACC,MAAX,CAAkBC,QAAlB,CAA2B,IAA3B,CAAL,EAAuC;AACrC,UAAMX,MAA8B,GAAG,EAAvC;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACC,MAAX,CAAkBG,MAAtC,EAA8CD,CAAC,IAAI,CAAnD,EAAsD;AACpD,YAAME,IAAI,GAAGL,UAAU,CAACC,MAAX,CAAkBE,CAAlB,CAAb;AACA,YAAMG,OAAO,GAAGN,UAAU,CAACO,YAAX,CAAwBJ,CAAxB,CAAhB;;AACA,UAAIE,IAAI,CAACH,QAAL,CAAc,SAAd,CAAJ,EAA8B;AAC5B5B,QAAAA,MAAM,CAACkC,GAAP,CAAW,QAAX,EAAqBH,IAArB,EAA2BC,OAA3B;AACD,OAFD,MAEO;AACL,cAAMZ,GAAG,GAAG,IAAIX,cAAJ,CAAyBuB,OAAzB,EAAkCD,IAAlC,CAAZ;AACAd,QAAAA,MAAM,CAACO,IAAP,CAAYJ,GAAZ;AACD;AACF;;AACD,QAAIH,MAAM,CAACa,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAM,IAAIL,uBAAJ,CAAmBR,MAAnB,CAAN;AACD;AACF;;AAED,SAAO;AACLkB,IAAAA,IAAI,EAAE,kBADD;AAELC,IAAAA,GAAG,EAAG,6CAA4CvC,WAAY;AAFzD,GAAP;AAID,CApED;;eAsEeD,O","sourcesContent":["import SemanticReleaseError from '@semantic-release/error'\r\nimport AggregateError from 'aggregate-error'\r\nimport cwu from 'chrome-webstore-upload'\r\nimport { createReadStream } from 'fs-extra'\r\n\r\nimport Context from './@types/context';\r\nimport PluginConfig from './@types/pluginConfig'\r\n\r\nconst publish = async ({ extensionId, target, asset }: PluginConfig, { logger }: Context) => {\r\n  const {\r\n    GOOGLE_CLIENT_ID: clientId,\r\n    GOOGLE_CLIENT_SECRET: clientSecret,\r\n    GOOGLE_REFRESH_TOKEN: refreshToken,\r\n  } = process.env\r\n\r\n  if (!extensionId) {\r\n    throw new SemanticReleaseError(\r\n      \"Option 'extensionId' was not included in the publish config. Check the README.md for config info.\",\r\n      'ENOEXTENSIONID',\r\n    )\r\n  }\r\n\r\n  if (!asset) {\r\n    throw new SemanticReleaseError(\r\n      \"Option 'asset' was not included in the publish config. Check the README.md for config info.\",\r\n      'ENOASSET',\r\n    )\r\n  }\r\n\r\n  const webStore = await cwu({\r\n    clientId,\r\n    clientSecret,\r\n    extensionId,\r\n    refreshToken,\r\n  })\r\n\r\n  const token = await webStore.fetchToken()\r\n\r\n  const zipFile = createReadStream(asset)\r\n  const uploadRes = await webStore.uploadExisting(zipFile, token)\r\n\r\n  if (uploadRes.uploadState === 'FAILURE') {\r\n    const errors: SemanticReleaseError[] = []\r\n    uploadRes.itemError.forEach((err: any) => {\r\n      const semanticError = new SemanticReleaseError(\r\n        err.error_detail,\r\n        err.error_code,\r\n      )\r\n      errors.push(semanticError)\r\n    })\r\n    throw new AggregateError(errors)\r\n  }\r\n\r\n  const publishRes = await webStore.publish(target || 'default', token)\r\n\r\n  if (!publishRes.status.includes('OK')) {\r\n    const errors: SemanticReleaseError[] = []\r\n    for (let i = 0; i < publishRes.status.length; i += 1) {\r\n      const code = publishRes.status[i]\r\n      const message = publishRes.statusDetail[i]\r\n      if (code.includes('WARNING')) {\r\n        logger.log('%s: %s', code, message)\r\n      } else {\r\n        const err = new SemanticReleaseError(message, code)\r\n        errors.push(err)\r\n      }\r\n    }\r\n    if (errors.length > 0) {\r\n      throw new AggregateError(errors)\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'Chrome Web Store',\r\n    url: `https://chrome.google.com/webstore/detail/${extensionId}`,\r\n  }\r\n}\r\n\r\nexport default publish\r\n"],"file":"publish.js"}